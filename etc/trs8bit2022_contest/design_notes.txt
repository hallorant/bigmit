---------------------------------------
-- 2022 TRS8BIT Wordle Contest Notes --
---------------------------------------

-------------------------
-- Implementation Work --
-------------------------

Implemented the Huffman and created a lot of unit tests with z80unit.  This
helped a lot to ensure the code worked prior to hooking it up to George's main
program. The only mistake I made was making the getpuz index 1 based rather
than 0 based. This mistake was easy to correct and test.

□

--------------------------------------------------------------
-- Nothing fancy use Huffman and suffix encode the rest.txt --
--------------------------------------------------------------

{a=2476, b=597, c=883, d=1516, e=3640, f=516, g=785, h=869, i=1717, j=89,
 k=786, l=1643, m=837, n=1543, o=1707, p=830, q=49, r=1933, s=4985, t=1874,
 u=944, v=322, w=391, x=161, y=1554, z=229}

-----------------
  Huffman Code
-----------------
s	110
e	011
a	1011
r	1001
t	1000
i	0100
o	0011
l	0001
y	11111
n	11110
d	11101
u	10100
c	01011
h	01010
m	00101
p	00100
k	00001
g	00000
b	111000
f	101010
w	1110011
v	1110010
z	1010110
x	10101111
j	101011101
q	101011100
-----------------

This gets us to the below sizes
---------------------------------------------------------
answer_data_size                             6,362  bytes
rest_data_size                              15,108  bytes
total                                       21,470  bytes
---------------------------------------------------------
□

A better idea is to have a special character for
o when the letter is unchanged
o when the letter is the next letter in the alphabet

{.=7917, ^=3940, a=1715, b=228, c=503, d=1140, e=2596, f=233, g=517, h=577,
 i=1143, j=29, k=703, l=1062, m=410, n=1008, o=996, p=486, q=10, r=1398, s=2806,
 t=989, u=471, v=167, w=181, x=100, y=1376, z=175}

-------------------
  Huffman Code
-------------------
.	01   (same letter)
^	100  (next letter)
s	1111
e	1101
a	0010
r	0000
y	11101
i	11001
d	11000
l	10111
n	10101
o	10100
t	00111
k	00010
h	111000
g	101101
c	101100
p	001101
u	001100
m	000110
f	0001111
b	0001110
w	11100111
z	11100110
v	11100101
x	111001001
j	1110010001
q	1110010000
-------------------

This gets us to the below sizes
---------------------------------------------------------
answer_data_size                             10,530 bytes
rest_data_size                               18,646 bytes
total                                        29,176 bytes
---------------------------------------------------------

□

One idea is to difference between letters for rest.txt we find

LETTER 1: {1=25}
LETTER 2: {1=142, 2=45, 3=54, 4=24, 5=4, 6=12, 7=1, 8=1, 10=1}
LETTER 3: {1=1337, 2=414, 3=168, 4=211, 5=44, 6=96, 7=14, 8=21, 9=3, 10=15, 11=1, 12=3, 13=2, 14=4, 16=2, 19=1, 20=1, 21=1, 25=1}
LETTER 4: {1=1126, 2=953, 3=615, 4=829, 5=252, 6=355, 7=198, 8=173, 9=86, 10=121, 11=95, 12=40, 13=40, 14=57, 15=28, 16=29, 17=16, 18=7, 19=7, 20=17, 21=7, 22=1, 23=2, 24=1, 25=1}
LETTER 5: {1=405, 2=105, 3=59, 4=276, 5=143, 6=511, 7=124, 8=91, 9=22, 10=177, 11=74, 12=26, 13=37, 14=386, 15=264, 16=39, 17=16, 18=102, 19=6, 20=52, 21=5, 22=1, 23=1, 24=19, 25=1}

This indicates that +1 letter should have frequency of 3010 for Huffman code (we can assume letter 1).

It seems useful to:
1) Assume the first letter always goes up, takes up no bits.
2) Include special increment-prior-letter-by-one as the huffman most common case.


{a=2477, b=469, c=790, d=1363, e=3397, f=411, g=691, h=809, i=1612, j=55, k=759, l=1471, m=640, n=1330, o=1565, p=727, q=39, r=1919, s=4570, t=1523, u=820, v=267, w=334, x=121, y=1523, z=185}
@=3010

This gets us to the below sizes
---------------------------------------------------------
answer_data_size                              6,549 bytes
rest_data_size                               14,966 bytes
total                                        21,515 bytes
---------------------------------------------------------

□

------------------------------------------
-- Dictionary Encoding Design (Updated) --
------------------------------------------

1) Huffman encode the letters

2) For the answers its okay to just encode them directly. That way they are in
   order and the code can just count up which answer it is.
   (6,485 bytes)

3) Use the design above for the rest using Huffman encoding for the letters (not 5 bits).
   (16,401 bytes)

□

--------------------------------------------------
-- Size data collected via Java code generation --
--------------------------------------------------

---------------------------------------------------------
DICT DATA-ONLY SIZE ANALYSIS
---------------------------------------------------------
George's example program data                38,880 bytes
  -- answer size                              6,939 bytes
  -- rest size                               31,941 bytes
---------------------------------------------------------
Answers/w Huffman encoding                    6,485 bytes
Rest/Huffman encoding                        29,400 bytes
---------------------------------------------------------
Initial design                               25,419 bytes
 -- Just rest                                18,660 bytes
 -- As described above
---------------------------------------------------------
Trie Initial design/w Huffman encoding       22,862 bytes
 -- Just answers                              7,704 bytes
 -- Just rest                                16,401 bytes
---------------------------------------------------------
Initial design No answer info (doesn't work) 20,329 bytes
 -- Sorted trie but cannot look answers
 -- values by index
---------------------------------------------------------
Trie Answers non-sorted then rest            25,325 bytes 
 -- Answers first, so can count index
 -- value, then rest
---------------------------------------------------------
Trie Answers non-sorted then rest/w Huffman  22,332 bytes
 -- Just answers                              7,263 bytes
 -- Just rest                                16,401 bytes
---------------------------------------------------------

□

--------------------------------
-- Dictionary Encoding Design --
--------------------------------

WORDS THAT MAKE UP WORDLE

The dictionary we have to consider is built from two files. Each word is
composed of five small letters. Some facts on the two files:

o  answer.txt contains  2,313 (not sorted) words.
o  rest.txt   contains 10,647 sorted words.

STORAGE AS A DEPTH-FIRST TRAVERSAL OF A TRIE

For the dictionary we use a custom Trie structure. For an introduction see
https://en.wikipedia.org/wiki/Trie The structure is stored as a depth-first
traversal of the Trie. We'll merge and sort answer.txt and rest.txt to save
space. To show a concrete example, let's encode the answers "tandy" and "taker"
with non-answers "teeny" and "zoner".

  tandy(answer=0:↑3)ker(answer=126:↑4)eeny(↑5)zoner(END)

The "answer=" values are the index into the answers and the "up" values define
the Trie. This compactly represents the Trie below as a bit stream.

     t    z
   a   e  o
  n k  e  n
  d e  n  e
  y r  y  r
    ↑answer index 126
  ↑answer index 0

WORD ENCODING

To encode this structure we'll use a stream of bits. Lowercase is used in
answer.txt and rest.txt. We want to use 5 bits so we'll encode each letter into
the range 0..26. We do this by subtracting 97 which is the ASCII code for 'a'.
For example, below we encode the letters in the example above.

  't' value 116-97=19 will be $13
  'a' value  97-97=0  will be $00
  'n' value 110-97=13 will be $0d
  'd' value 100-97=3  will be $03
  'y' value 121-97=24 will be $18
  'k' value 107-97=10 will be $0a
  'e' value 101-97=4  will be $04
  'r' value 114-97=17 will be $11
  'z' value 122-97=25 will be $19
  'o' value 111-97=14 will be $0e

Thus we are encoding each letter in 5 bits as illustrated below.

  +---+---+---+---+---+
  |       letter      |
  +---+---+---+---+---+

Before considering "up" counts and answer/non-answer encoding we review a few
facts that simplify this part of our design.

o Each word is exactly 5 characters.
o Going up or marking an answer is only required after a word.

ENCODING AFTER A FULL WORD

After a full word we have to encode the following information.

o Is the word in answer.txt or rest.txt
o If in answer.txt then what is the index, or line position of the word in the
  file. answer.txt contains 0..2312 answer words ($909) so and index which fits
  into 12 bits.
o An "up" count to indicate how many letters in the word the Trie depth-first
  traversal goes "up".  This is thinking of the Trie as a vertical tree (see
  example above). It is a "go left" count if you think of the word as going
  left to right.

Because of the answer flag there are two different encodings in the steam.
Notice that we are able to optimize the case where the word is in rest.txt.
This helps because rest.txt contains 10.6k words and answer.txt only has 2.3k
words.

    ↓ answer flag (0=word is in rest.txt)
  +---+---+---+---+
  | 0 | up count  |
  +---+---+---+---+

    ↓ answer flag (1=word is in answer.txt)
  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
  | 1 |     12 bit index into answer.txt file         | up count  |
  +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+

We encode the "up" counts in three bits as listed below.

  001 ↑1
  010 ↑2
  011 ↑3
  100 ↑4
  101 ↑5

END ENCODING

To indicate the traversal of the Trie is complete we use a special "up" count
encoding. At the end of the Trie depth-first traversal we are at the end of the
last word. The stream, therefore, finishes up on a three bit "up" count. A zero
value for "up" count indicates the end of the stream as listed below.

  000 (END)

□
