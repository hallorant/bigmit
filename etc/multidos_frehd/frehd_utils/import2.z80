;; import2.z80
;; Timothy Mann, 8/24/97
;; Frederic Vecoven, 4/15/13 : adapted for trs_hard emulator
;;
;;
;;	Copyright (c) 1997, Timothy Mann
;;
;;	This software may be copied, modified, and used for any
;;	purpose without fee, provided that (1) the above copyright
;;	notice is retained, and (2) modified versions are clearly
;;	marked as having been modified, with the modifier's name and
;;	the date included.  
;;
;; Use hard drive emulator commands to copy a file from FAT to TRS-80
;; Usage: IMPORT2 [-lne] unixfile [tofile]
;; Parameter -l will convert the Unix file to lower case.
;;  (Needed for NEWDOS/80.  They insist on uppercasing the
;;  command line.)
;; If the -n parameter is given, each newline ('\n') in the Unix
;;  file is converted to a carriage return ('\r'), the TRS-80 end of
;;  line character.
;; The program tries to determine what DOS it is running on and use
;;  the correct FCB end of file convention, but this works only on
;;  TRSDOS, LDOS, and NEWDOS/80.  For other DOSes that use the
;;  NEWDOS/80 convention (such as DOSPLUS), give the -e paramter.
;; If the tofile parameter is omitted, the last component of the
;;  Unix pathname is used, with '.' changed to '/'.  If this is
;;  not a legal TRS-80 filename, you get an error message.

; Assembler Control Flags

CPM         EQU     0
TRSDOS      EQU     1

;; Model I/III addresses
@fspec  equ 441ch
@init   equ 4420h
@open   equ 4424h
@close  equ 4428h
@read   equ 4436h
@write  equ 4439h
@error  equ 4409h
@exit   equ 402dh
@abort  equ 4030h       
@put	equ 001bh
dodcb$	equ 401dh

;; Model 4 SVCs
@svc	equ 40  ; rst address for SVCs
;@svc	equ 5   ; older zmac requires 8080-style "rst 5"
@fspec6	equ 78
@init6	equ 58
@open6	equ 59
@close6	equ 60
@read6	equ 67
@write6	equ 75
@error6	equ 26
@exit6	equ 22
@abort6	equ 21
@dsply6	equ 10

;; Model 4 only: file init or open with wrong LRL.  Can be ignored.
lrlerr  equ 42

	org 5200h

;; Jump tables for OS independence
startj:
fspec:	call @fspec
	ret
init:	call @init
	ret
open:	call @open
	ret
close:	call @close
	ret
reed:	call @read
	ret
write:	call @write
	ret
error:	call @error
	ret
exit:	call @exit
	ret
abort:	call @abort
	ret
dsply:	call dsply5
	ret
setern:	call setern5
	ret
endj:

; Model 4
startj6:
	ld a, @fspec6
	rst @svc
	ret
	ld a, @init6
	rst @svc
	ret
	ld a, @open6
	rst @svc
	ret
	ld a, @close6
	rst @svc
	ret
	ld a, @read6
	rst @svc
	ret
	ld a, @write6
	rst @svc
	ret
	ld a, @error6
	rst @svc
	ret
	ld a, @exit6
	rst @svc
	ret
	ld a, @abort6
	rst @svc
	ret
	ld a, @dsply6
	rst @svc
	ret
	call setern6
	ret

; Nonzero for LDOS ern convention
ernldos: db 1


	;; Interface defines
DATA2	  equ 0c2h
SIZE2     equ 0c3h
COMMAND2  equ 0c4h
ERROR2    equ 0c5h
STATUS    equ 0cfh
OPENFILE  equ 03h
READFILE  equ 04h
WRITEFILE equ 05h
CLOSEFILE equ 06h

;; FatFS flags
FA_OPEN_EXISTING equ 00h
FA_READ          equ 01h
FA_WRITE         equ 02h
FA_CREATE_NEW    equ 04h
FA_CREATE_ALWAYS equ 08h
FA_OPEN_ALWAYS   equ 10h
	
	
import: 
	ld a, (000ah)		; Model 4?
	cp 40h
	jr z, not4
	push hl
	ld de, startj
	ld hl, startj6
	ld bc, endj - startj
	ldir
	pop hl
not4:
	ld a, (4427h)		; system id for Newdos/80...
	sub 82h			; ...should be 82h (v2.0)
	jr z, gotid
	ld a, (441fh)		; system version number for most other DOSes
	sub 13h			; TRSDOS 1.3?
gotid:  ld (ernldos), a

flag0:	ld a, (hl)		; look for flags
	cp ' '
	jp c, usage		; error if line ends here
	jr nz, flag1
	inc hl
	jr flag0
flag1:	cp '-'
	jr nz, unix1
	inc hl
	ld a, (hl)
flag3:	or 20h
	cp 'e'
	jr nz, flagl
	sub a
	ld (ernldos), a
	jr flag2
flagl:	cp 'l'
	jr nz, flagn		; check for next flag
	ld a, 1
	ld (lflag), a
	jr flag2
flagn:	cp 'n'
	jr nz, usage		; unknown flag
	ld a, 1
	ld (nflag), a
flag2:	inc hl
	ld a, (hl)
	cp ' '
	jr nz, flag3		; another flag follows
	inc hl
	jr flag0

unix1:	ld de, iobuf+1		; copy Unix filename
	ld a, ' '
unix2:	cp (hl)
	ldi
	jr c, unix2
	dec de			; NUL terminate Unix name
	ld a, 0
	ld (de), a              
	jr z, trs80		; go if two names given

;; Translate last component of Unix name to TRS-80 name			
	dec hl			; back up to terminator
unix3:	dec hl			; back up to last byte of name
	ld a, (hl)
	cp '.'			; change '.' to '/'
	jr nz, notdot
	ld (hl), '/'
notdot:	cp '/'
	jr z, unix4
	cp ' '
	jr nz, unix3
unix4:	inc hl			; point to start of modified last component 

trs80:	ld de, dcb              ; ready to get TRS-80 filename from (HL)
        call fspec
        jr nz, usage

	ld hl, iobuf+1		; Unix path
	ld a, (lflag)
	or a
	call nz, lcconv		; convert path to lower case

	ld b, 2				; length = 2 (flag + null-terminator)
	ld a, 0				; null-terminator
stlen1:	cp (hl)
	jr z, stlen2
	inc b				; found a character
	inc hl
	jr stlen1
stlen2:	ld a, OPENFILE
	out (COMMAND2), a		; send OPENFILE command
	call wait
	ld a, b
	out (SIZE2), a			; send SIZE2
	ld c, DATA2
	ld hl, iobuf
	ld (hl), FA_OPEN_EXISTING|FA_READ	; flags
	otir
	call wait
openok:	ld hl, iobuf
        ld de, dcb
        ld b, 0
        call init               ; open the file
	jr z, opn2ok
	cp lrlerr
	jr z, opn2ok
	ld c, a
        call error
        jp abort
usage:  ld hl,intro             ; what this is all about
        call dsply
        ld hl, usager           ; error message and exit
        call dsply
        jp abort

;; Read
rloop:
opn2ok:	ld a, 0
	out (SIZE2), a		; request 256 bytes
	ld a, READFILE
	out (COMMAND2), a	; read
	call wait
	ld bc, 0000h
	in a, (STATUS)		; get status. DRQ set means we read something
	and 08h
	jr z, readok
	in a, (SIZE2)
	ld c, a
	or a
	jr nz, readok
	ld b, 1
readok:	
	push bc			; save byte count
	ld b, c
	ld c, DATA2
	ld hl, iobuf
	inir			; read buffer from interface
	pop bc
;; Translate
        ld a, (nflag)		; check for NL feature
	and a
	jr z, nlfals
	ld hl, iobuf
	push bc			; save byte count
	ld a, 0ah
	ld d, 0dh
	inc c			; deal with b=0 and/ c=0
	inc b
	jr tstrt
tloop:	cp (hl)
	jr nz, notcr
	ld (hl), d
notcr:	inc hl
tstrt:	dec c
	jr nz, tloop
	djnz tloop
	pop bc			; restore byte count

;; Write
nlfals:	push bc			; save byte count
	ld hl, iobuf
	ld de, dcb
	inc b			; deal with b=0 and/or c=0
	ld a, c
	and a
	jr z, wstrt
wloop:  ld (dcb+3), hl
	call write              ; write 256 bytes to file
        jr z, wrok
	ld c, a
        call error              ; oops, i/o error
        jp abort
wrok:	inc h
wstrt:  djnz wloop
	pop bc			; restore byte count

;; Done?
	ld a, c
	and a
	jr nz, closit		; done for sure
	cp b
	jr nz, rloop		; maybe not done (sloppy)

closit:	ld a, CLOSEFILE
	out (COMMAND2), a
	call wait
closok:	ld a, c
	ld (dcb+8), a		; set EOF offset
	call setern		; set ERN (in case shortening file)
	ld de, dcb
        call close              ; close the TRS-80 file
        jr z, cls2ok
	ld c, a
        call error              ; oops, i/o error
        jp abort
cls2ok: ld hl, 0                ; all is well
	jp exit

;; interface error
uerror: ld hl, error_m		; display error prefix
	call dsply
	in a, (ERROR2)		; get error number
	cp 15h			; check error number.
	jr c, uerrok
	sub a			; A=0 unknown error 
uerrok:	ld l, a
	ld h, 00h
	add hl, hl		; pointers are 2 bytes
	ld de, error_table
	add hl, de		; hl points to the pointer
	ld a, (hl)
	inc hl
	ld h, (hl)
	ld l, a			; hl points to the string
	call dsply
        jp abort

;; Display message in HL.  03h terminate, 0dh newline and terminate.
dsply5:	ld de, dodcb$
	push hl
dsply0:	ld a, (hl)
	cp 03h
	jr z, dsply1
	push af
	call @put
	pop af
	inc hl
	cp 0dh
	jr nz, dsply0
dsply1:	pop hl
	ret

;; Convert (NUL terminated) string in HL to lower case.
lcconv:	push hl
	inc hl
	ld d, h
	ld e, l
lcloop:	ld a, (hl)
	cp 5bh			; use '[' or uparrow as escape
	jr nz, lconv1
	inc hl
	ld a, (hl)
	jr lconv2		; char after esc: don't convert
lconv1:	sub 'A'
	cp 26
	ld a, (hl)
	jr nc, lconv2
	or 20h			; convert to lower case
lconv2:	ld (de), a
	inc hl
	inc de
	or a			; NUL terminator?
	jr nz, lcloop
	pop hl
	ret

;;; wait until the interface is ready
wait:	ex (sp),hl
	ex (sp),hl			; small delay to settle the controller
wait1:	in a, (STATUS)
	rlca
	jr c, wait1
	in a, (STATUS)			; read status again
	and 01h				; nz = error
	jr nz, uerror
	ret


;; EOF handling differs between TRS-80 DOSes:
;;  For TRSDOS 2.3 and LDOS, word (dcb+12) contains the number of
;;  256 byte records in the file, byte (dcb+8) contains the EOF
;;  offset in the last record (0=256).
;;  For NEWDOS/80 and TRSDOS 1.3, byte (dcb+8) and word (dcb+12) 
;;  form a 24 bit number containing the relative byte address of EOF.
;;  Thus (dcb+12) differs by one if the file length is not a
;;  multiple of 256 bytes.  DOSPLUS also uses this convention,
;;  and NEWDOS 2.1 probably does too (not checked).

; Set ending record number of file to current position
; EOF offset in C; destroys A, HL
setern5:
	ld hl, (dcb+10)		; current record number
	ld a, (ernldos)         ; get ERN convention
	or a
	jr nz, noadj            ; go if TRSDOS 2.3/LDOS convention
adj:	or c			; length multiple of 256 bytes?
	jr z, noadj             ; go if so
	dec hl			; no, # of records - 1
noadj:	ld (dcb+12), hl
	ret	

; All Model 4 mode operating systems should be TRSDOS/LS-DOS 6.x compatible
setern6:
	ld hl, (dcb+10)
	ld (dcb+12), hl
	ret

lflag:	defb 0
nflag:	defb 0

intro: defb 'IMPORT2 '

       INCLUDE VERSION.Z80

       defb ' - Import from SD for the FreHD Hard Drive Emulator', 0dh
usager: defb 'Usage: IMPORT2 [-lne] sdfile [tofile]', 0dh

error_m: defb 'Error: ', 03h
fr_unknown: defb 'Unknown error', 0dh			; 0
fr_disk_err: defb 'Disk error', 0dh			; 1
fr_int_err: defb 'Internal error', 0dh			; 2
fr_not_ready: defb 'Drive not ready', 0dh 		; 3
fr_no_file: defb 'File not found', 0dh	  		; 4
fr_no_path: defb 'Path not found', 0dh	  		; 5
fr_invalid_name: defb 'Invalid pathname', 0dh		; 6
fr_denied: defb 'Access denied', 0dh			; 7
fr_exist: defb 'File exists', 0dh			; 8
fr_invalid_obj:	defb 'File/dir object invalid', 0dh	; 9
fr_write_protected: defb 'Write protected', 0dh		; 10
fr_invalid_drive: defb 'Invalid drive', 0dh		; 11
fr_not_enabled:	defb 'Volume not mounted', 0dh		; 12
fr_no_fs: defb 'No FAT fs found', 0dh			; 13
fr_mkfs_aborted: defb 'mkfs aborted', 0dh		; 14
fr_timeout: defb 'Timeout detected', 0dh		; 15
fr_locked: defb 'File locked', 0dh			; 16
fr_not_enough_core: defb 'Not enough core', 0dh		; 17
fr_too_many_open_files:	defb 'Too many open files', 0dh ; 18
fr_invalid_param: defb 'Invalid parameter', 0dh		; 19
fr_disk_full: defb 'Disk full', 0dh			; 20
error_table: defw fr_unknown ,fr_disk_err, fr_int_err, fr_not_ready, fr_no_file
	defw fr_no_path, fr_invalid_name, fr_denied, fr_exist, fr_invalid_obj
	defw fr_write_protected, fr_invalid_drive, fr_not_enabled
	defw fr_no_fs, fr_mkfs_aborted, fr_timeout, fr_locked
	defw fr_not_enough_core, fr_too_many_open_files, fr_invalid_param
	defw fr_disk_full	

dcb:	defs 48			; 48 for Model III TRSDOS 1.3   
iobuf:	defs 256
        
        end import
